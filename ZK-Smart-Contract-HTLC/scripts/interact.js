const VerifyAndExchangeHTLC = artifacts.require("VerifyAndExchangeHTLC"); // The HTLC contract
const Verifier = artifacts.require("Verifier"); // ZoKrates verifier contract (generated by ZoKrates)

module.exports = async function(callback) {
    try {
        const accounts = await web3.eth.getAccounts();

        // Deploy the contracts
        console.log("Deploying ZoKrates Verifier contract...\n");
        const verifier = await Verifier.new({ from: accounts[0] });
        console.log("Verifier deployed at:", verifier.address, "\n");

        console.log("Deploying VerifyAndExchangeHTLC contract...\n");
        const htlc = await VerifyAndExchangeHTLC.new(verifier.address, { from: accounts[0] });
        console.log("VerifyAndExchangeHTLC deployed at:", htlc.address, "\n");

        // Print out the initial balance
       //console.log(`Initial balances:\n`);
       // console.log(`Sender (${sender}): ${await getBalance(sender)} ETH`);
       // console.log(`Receiver (${receiver}): ${await getBalance(receiver)} ETH`);
       // console.log(`Contract (${htlc.address}): ${await getBalance(htlc.address)} ETH`);

        const twoEther = web3.utils.toWei("2", "ether");
        //const oneDayInSeconds = 86400;  // Creating a 24 hr lock
        const shortTimeLock = 10; // Creating a short timelock of 10 sec to test
        const timeLock = Math.floor(Date.now() / 1000) + shortTimeLock;

        // Provide the secret for the pre-image hashlock check
        const secret = "Schhh-eduled"; // From Dracula Dead and Loving it
        const hashlock = web3.utils.keccak256(web3.utils.encodePacked({type: 'string', value: secret})); // Hash using Keccak256 (same hash used in the contract)

        console.log("Creating the Hashed Time Locked Contract (HTLC)...\n");
        const createTx = await htlc.createHTLC(accounts[2], timeLock, hashlock, {
            from: accounts[1],
            value: twoEther
        });

        const contractId = createTx.logs[0].args.contractId;
        console.log("HTLC created with ID:", contractId, "\n");


        // Withdraw
        // Proof is done off-chain using ZoKrates
        console.log("Providing proof of knowledge for k..\n");
        const proof = { // This is taken from the 'proof.json' file generated by ZoKrates
            a: [ // Changed 0x1d to 0x1z to test proof validity
                "0x1df436110afa8da2dbeed9b05905f23ee26a70d027a1d8066b741d4a8ac372ba",
                "0x28b37410adfc0e8b901a568a67ea5b3dfbe6e13a0bfae0a26387be6b08911b55"
            ],
            b: [
                [
                    "0x1e4634c215fdfa9da4d116daa06e9aed0a7bd70f34927b5638ad37d1142bbfc8",
                    "0x2c49002902d804be79b0f4081efa8bbd73c3756424b35383967523e04e5cf622"
                ],
                [
                    "0x0b98283e79a0bfb6692677a3dbc9f70b559e7139acd4d97de6f62988e55c69f4",
                    "0x136e97a1f921787323c4e0091b7420b711548e15fd70c0ed1ffdc080e033e5c7"
                ]
            ],
            c: [
                "0x291c3d78a62fa83bfba77b3f56528f2d44526c838db4b0635f4b2576074a5261",
                "0x217ccff0007580c21e7740738bdbb5dd6f4b239246651b3f64937bba076a6d01"
            ]
        };

        const inputs = [
            "0x1db2aa76f5442e63d3691e410bfed3144eb2e0b45fcfe41a65eb83c53e7e7e9f", // h = hash(k)
            "0x29f910df8206ba5a7e65a1548a2ff9a2ccd931074be9d2a7043267cff4d07cc7",
            "0x000000000000000000000000000000000000000000000000000000000164309f",
            "0x0000000000000000000000000000000000000000000000000000000000000007",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ];
        //const preImage = inputs[0];  // From the first input

        // Delay before withdrawing to test the timelock mechanism after providing acorrect proof, but timeLock has expired
        //await new Promise(resolve => setTimeout(resolve, (shortTimeLock + 5) * 1000));

        // Withdra Funds
        try {
            const withdrawalTx = await htlc.withdraw(
                contractId, 
                proof.a, 
                proof.b, 
                proof.c, 
                inputs, 
                //preImage,
                //web3.utils.utf8ToHex(secret), 
                secret,
                { from: accounts[2] }
            );
            console.log("Successful withdrawal \n");
            console.log("Transaction details: ", withdrawalTx, "\n")
            console.log("More detailed version of tx logs: ",JSON.stringify(withdrawalTx, null, 2), "\n");
        } catch (error) {
            console.log("Withdrawal failed:", error.message, "\n");
        }

        // Check contract balance
        const balance = await htlc.getContractBalance();
        console.log("Contract balance:", web3.utils.fromWei(balance, 'ether'), "ETH", "\n");

        // Get contract details
        const contractDetails = await htlc.getContract(contractId);
        console.log("Contract details:", contractDetails, "\n");

        callback();
    } catch (error) {
        console.error("Error:", error, "\n");
        callback(error);
    }
};